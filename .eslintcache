[{"C:\\Darpan's Projects\\React + Firebase\\instagram-carbon\\src\\index.js":"1","C:\\Darpan's Projects\\React + Firebase\\instagram-carbon\\src\\App.js":"2","C:\\Darpan's Projects\\React + Firebase\\instagram-carbon\\src\\reportWebVitals.js":"3","C:\\Darpan's Projects\\React + Firebase\\instagram-carbon\\src\\Post.js":"4","C:\\Darpan's Projects\\React + Firebase\\instagram-carbon\\src\\Firebase.js":"5","C:\\Darpan's Projects\\React + Firebase\\instagram-carbon\\src\\firebase.js":"6","C:\\Darpan's Projects\\React + Firebase\\instagram-carbon\\src\\UploadPost.js":"7","C:\\Darpan's Projects\\React + Firebase\\instagram-carbon\\src\\LoginToUpload.js":"8"},{"size":500,"mtime":499162500000,"results":"9","hashOfConfig":"10"},{"size":6895,"mtime":1631431901311,"results":"11","hashOfConfig":"10"},{"size":362,"mtime":499162500000,"results":"12","hashOfConfig":"10"},{"size":2652,"mtime":1631427892574,"results":"13","hashOfConfig":"10"},{"size":555,"mtime":1630568898236,"results":"14","hashOfConfig":"10"},{"size":555,"mtime":1630662092981,"results":"15","hashOfConfig":"10"},{"size":2338,"mtime":1630927116002,"results":"16","hashOfConfig":"10"},{"size":252,"mtime":1630666704123,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"ltnhpn",{"filePath":"21","messages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23"},{"filePath":"24","messages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"26","messages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28","usedDeprecatedRules":"20"},{"filePath":"29","messages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"33","messages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"20"},{"filePath":"36","messages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"C:\\Darpan's Projects\\React + Firebase\\instagram-carbon\\src\\index.js",[],["38","39"],"C:\\Darpan's Projects\\React + Firebase\\instagram-carbon\\src\\App.js",["40","41","42","43"],"import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport logo from \"./instagram-text.png\";\nimport logo1 from \"./Carbon-Logo-For-Site-v2.png\";\nimport Post from './Post';\nimport { auth, db } from './firebase';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Modal from '@material-ui/core/Modal';\nimport { Button, Input } from '@material-ui/core';\nimport UploadPost from './UploadPost';\nimport LoginToUpload from './LoginToUpload';\nimport InstagramEmbed from 'react-instagram-embed';\n\nfunction getModalStyle() {\n  const top = 50;\n  const left = 50;\n\n  return {\n    top: `${top}%`,\n    left: `${left}%`,\n    transform: `translate(-${top}%, -${left}%)`,\n  };\n}\n\nconst useStyles = makeStyles((theme) => ({\n  paper: {\n    position: 'absolute',\n    width: 400,\n    backgroundColor: theme.palette.background.paper,\n    border: '2px solid #000',\n    boxShadow: theme.shadows[5],\n    padding: theme.spacing(2, 4, 3),\n  },\n}));\n\nfunction App() {\n  const classes = useStyles();\n  const [modalStyle] = useState(getModalStyle);\n  const [posts, setPosts] = useState([]);\n  const [open, setOpen] = useState(false);\n  const [openSignIn, setOpenSignIn] = useState(false);\n  const [username, setUsername] = useState('');\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [user, setUser] = useState(null);\n  \n  //This gets fired on every authentication action, like on every login or logout et cetera\n  useEffect(() => {\n    //login listener\n      const unsubscribe = auth.onAuthStateChanged((authUser) => {\n      if(authUser){\n        //User has logged in...\n        console.log(authUser);\n        setUser(authUser);\n      }else{\n        //User has logged out...\n        setUser(null);\n      }\n    })\n\n    return () => {\n      //Perform Cleanup actions\n      unsubscribe();\n    }\n  }, [user, username])\n\n  //useEffect\n  useEffect(() => {\n    //Everytime a new post is added, this code runs\n    db.collection('posts').orderBy(\"timestamp\", 'desc').onSnapshot(snapshot => {\n      setPosts(snapshot.docs.map(doc => ({id: doc.id, post: doc.data()})));  \n    });\n  }, []);\n\n  const signUp = (event) => {\n    event.preventDefault();\n    \n    auth\n      .createUserWithEmailAndPassword(email, password)\n      .then((authUser) => {\n        alert(\"Sign up successful!\");\n        setOpen(false);\n        return authUser.user.updateProfile({\n          displayName: username\n        })\n      })\n      .catch((error) => alert(error.message));\n  }\n\n  const signIn = (event) => {\n    event.preventDefault();\n\n    auth\n      .signInWithEmailAndPassword(email, password)\n      .then((authUser) => {\n        alert(\"Login successful!\");\n        setOpenSignIn(false);\n      })\n      .catch((error) => alert(error.message));\n  }\n\n  return (\n    <div className=\"app\">\n        {/* -------Sign Up Modal-------*/}\n        <Modal open={open} onClose={() => setOpen(false)}>\n          <div style={modalStyle} className={classes.paper}>\n            <form action=\"\" className=\"app__signup\">\n              <center>\n                <img src={ logo } className=\"app__headerImage\"/>\n              </center>\n                <Input placeholder=\"username\" type=\"text\" value={username} onChange = {(event) => setUsername(event.target.value)}/>\n                <Input placeholder=\"email\" type=\"text\" value={email} onChange = {(event) => setEmail(event.target.value)}/>\n                <Input placeholder=\"password\" type=\"password\" value={password} onChange = {(event) => setPassword(event.target.value)}/>\n                <Button onClick = { signUp }>Sign Up</Button>\n              </form>\n          </div>\n        </Modal>\n\n        {/* Signin Modal */}\n        <Modal open={openSignIn} onClose={() => setOpenSignIn(false)}>\n          <div style={modalStyle} className={classes.paper}>\n            <form action=\"\" className=\"app__signup\">\n              <center>\n                <img src={ logo } className=\"app__headerImage\"/>\n              </center>\n                <Input placeholder=\"email\" type=\"text\" value={email} onChange = {(event) => setEmail(event.target.value)}/>\n                <Input placeholder=\"password\" type=\"password\" value={password} onChange = {(event) => setPassword(event.target.value)}/>\n                <Button onClick = { signIn }>Sign In</Button>\n              </form>\n          </div>\n        </Modal>\n        \n       {/* ---------Header--------- */}\n        <div className=\"app__header\">\n          <div className=\"logos\">\n            <img className=\"app__headerImage\" src= { logo } alt=\"Instagram Logo\"/>\n            <div className=\"logo__text\">Carbon</div>\n          </div>\n          \n          {/* Login/SignUp Button */} \n          {\n            user?.displayName ? (\n              //Render Logout button if user is logged in\n              <div className=\"app__userCorner\">\n                <div className=\"app__usernameShow\">Welcome <span className=\"user__font\">{ user.displayName }!</span></div>\n                <Button onClick= { () => auth.signOut() } className=\"logout__button\"> Logout </Button>\n              </div>\n            ): (\n              //Render Signup/SingIn button if user is new\n              <div className=\"app__loginContainer\">\n                <Button onClick= { () => setOpenSignIn(true) } className=\"signin__button\"> Sign In </Button> /\n                <Button onClick= { () => setOpen(true) } className=\"signin__button\"> Sign Up </Button>\n              </div>\n            )\n          }   \n       </div>\n      \n      {/* ---------Posts---------- */}\n      <div className=\"app__posts\">\n        <div className=\"app__postsLeft\">\n          {\n            posts.map(({id, post}) => (\n              user?.displayName ? (\n            <Post key={id} postId = {id} username={post.username} caption={post.caption} user={ user } imageUrl={post.imageUrl} />\n            ): (\n              <Post key={id} postId = {id} username={post.username} caption={post.caption} imageUrl={post.imageUrl} />\n            )))\n          }\n        </div> \n        <div className=\"app__postsRight\">\n        {/* <InstagramEmbed\n          url='https://www.instagram.com/p/CNYz8kQBfKH/?utm_medium=copy_link'\n          clientAccessToken='123|456'\n          maxWidth={320}\n          hideCaption={false}\n          containerTagName='div'\n          protocol=''\n          injectScript\n          onLoading={() => {}}\n          onSuccess={() => {}}\n          onAfterRender={() => {}}\n          onFailure={() => {}}\n        /> */}\n        </div> \n      </div>\n      {/* Upload Post Component */}\n        {/* Loaded with a Caption Input, File Picker, Progress Bar and Post Button */}\n        {\n          user?.displayName ? (\n            //Render upload module only when user is logged in!\n            <UploadPost username={ user.displayName }/>\n          ): (\n            <LoginToUpload />\n          )\n        }\n      \n    </div>  \n  )\n}\n\nexport default App;\n","C:\\Darpan's Projects\\React + Firebase\\instagram-carbon\\src\\reportWebVitals.js",[],"C:\\Darpan's Projects\\React + Firebase\\instagram-carbon\\src\\Post.js",["44"],"import React, { useState, useEffect } from 'react';\r\nimport \"./Post.css\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport {db} from \"./firebase\";\r\nimport firebase from \"firebase\";\r\n\r\nfunction Post({ username, caption, imageUrl, postId, user }) {\r\n    const [comments, setComments] = useState([]);\r\n    const [comment, setComment] = useState(\"\");\r\n\r\n    useEffect(() => {\r\n        let unsubscribe;\r\n        if(postId){\r\n            unsubscribe = db\r\n            .collection('posts')\r\n            .doc(postId)\r\n            .collection(\"comments\")\r\n            .orderBy(\"timestamp\", \"desc\")\r\n            .onSnapshot((snapshot) => {\r\n                setComments(snapshot.docs.map((doc) => doc.data()))\r\n            });\r\n        }\r\n        return () => {\r\n            unsubscribe();\r\n        };\r\n    }, [postId]);\r\n\r\n    const postComment = (event) => {\r\n        event.preventDefault();\r\n        if(!user){\r\n            alert(\"Please login to comment!\");\r\n        }else{\r\n            db.collection(\"posts\").doc(postId).collection(\"comments\").add({\r\n                comment: comment,\r\n                username: user.displayName,\r\n                timestamp: firebase.firestore.FieldValue.serverTimestamp()\r\n            });\r\n            setComment(\"\");\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"post\">\r\n            {/* header -> avatar + username */}\r\n            <div className=\"post__header\">\r\n                <Avatar className=\"post__avatar\" src=\"https://m.media-amazon.com/images/I/41jLBhDISxL._SY355_.jpg\"/>\r\n                <h3>{ username }</h3>\r\n            </div>\r\n\r\n            {/* image */}\r\n            <img className=\"post__image\" src={ imageUrl } alt=\"User Image\" />\r\n            \r\n            {/* username + caption */}\r\n            <p className=\"post__text\"> <strong> @{ username } </strong> { caption }</p>\r\n\r\n            {/* show comments */}\r\n            <div className=\"post__comments\">\r\n                {\r\n                    comments.map((comment) => (\r\n                        <p>\r\n                            <strong>@{comment.username}</strong> &nbsp; {comment.comment}\r\n                        </p>\r\n                    ))\r\n                }\r\n            </div>\r\n\r\n            {/* comment section */}\r\n            <form className=\"post__commentBox\">\r\n                <input type=\"text\" placeholder=\"Add a comment...\" className=\"post__input\" value={ comment } onChange = {(e) => setComment(e.target.value)}/>\r\n                <button className=\"post__comment\" disabled={!comment} type=\"submit\" onClick={postComment}>Post</button>\r\n            </form>\r\n\r\n        </div>\r\n    )\r\n}\r\n        \r\nexport default Post\r\n","C:\\Darpan's Projects\\React + Firebase\\instagram-carbon\\src\\Firebase.js",[],"C:\\Darpan's Projects\\React + Firebase\\instagram-carbon\\src\\firebase.js",[],"C:\\Darpan's Projects\\React + Firebase\\instagram-carbon\\src\\UploadPost.js",["45"],"import React, { useState } from 'react';\r\nimport { Button } from '@material-ui/core';\r\nimport {storage, db} from './firebase';\r\nimport firebase from 'firebase';\r\nimport \"./UploadPost.css\";\r\n\r\n\r\nfunction UploadPost({ username }) {\r\n    const [image, setImage] = useState(null);\r\n    const [progress, setProgress] = useState(0);\r\n    const [caption, setCaption] = useState(''); \r\n    \r\n    const handleChange = (event) => {\r\n        if(event.target.files[0]){\r\n            setImage(event.target.files[0]);\r\n        }\r\n    }\r\n\r\n    const handleUpload = () => {\r\n         const uploadTask = storage.ref(`images/${image.name}`).put(image);\r\n\r\n         uploadTask.on(\r\n             \"state_changed\",\r\n             (snapshot) => {\r\n                 //progress function...\r\n                 const progress = Math.round(\r\n                     (snapshot.bytesTransferred / snapshot.totalBytes) * 100\r\n                 );\r\n                 setProgress(progress);\r\n             },\r\n             (error) => {\r\n                 console.log(error.message);\r\n             },\r\n             () => {\r\n                 //Complete Function...\r\n                 storage\r\n                    .ref(\"images\")\r\n                    .child(image.name)\r\n                    .getDownloadURL()\r\n                    .then(url => {\r\n                        db.collection(\"posts\").add({\r\n                            timestamp: firebase.firestore.FieldValue.serverTimestamp(),\r\n                            caption: caption,\r\n                            imageUrl: url,\r\n                            username: username\r\n                        });\r\n                        setProgress(0);\r\n                        setCaption(\"\");\r\n                        setImage(null);\r\n                    })\r\n             }\r\n         )\r\n    }\r\n    return (\r\n        <div className=\"postUpload__box\">\r\n            <div className=\"main\">\r\n                <progress value={ progress } max=\"100\" id=\"progress\" />\r\n                <input type=\"text\" placeholder=\"Enter a caption...\" onChange={(event) => setCaption(event.target.value)} value={ caption } />            \r\n                <input type=\"file\" onChange={ handleChange } />\r\n                <button onClick={ handleUpload } className=\"Button\">Upload</button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default UploadPost\r\n","C:\\Darpan's Projects\\React + Firebase\\instagram-carbon\\src\\LoginToUpload.js",[],{"ruleId":"46","replacedBy":"47"},{"ruleId":"48","replacedBy":"49"},{"ruleId":"50","severity":1,"message":"51","line":4,"column":8,"nodeType":"52","messageId":"53","endLine":4,"endColumn":13},{"ruleId":"50","severity":1,"message":"54","line":12,"column":8,"nodeType":"52","messageId":"53","endLine":12,"endColumn":22},{"ruleId":"55","severity":1,"message":"56","line":109,"column":17,"nodeType":"57","endLine":109,"endColumn":65},{"ruleId":"55","severity":1,"message":"56","line":124,"column":17,"nodeType":"57","endLine":124,"endColumn":65},{"ruleId":"58","severity":1,"message":"59","line":51,"column":13,"nodeType":"57","endLine":51,"endColumn":78},{"ruleId":"50","severity":1,"message":"60","line":2,"column":10,"nodeType":"52","messageId":"53","endLine":2,"endColumn":16},"no-native-reassign",["61"],"no-negated-in-lhs",["62"],"no-unused-vars","'logo1' is defined but never used.","Identifier","unusedVar","'InstagramEmbed' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","'Button' is defined but never used.","no-global-assign","no-unsafe-negation"]